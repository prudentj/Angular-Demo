import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';
import { SnackService } from '../services/snack.service';

@Injectable({
  providedIn: 'root'
})

export class AuthGuard implements CanActivate {

  constructor(
    public afAuth:AngularFireAuth,
    private snack:SnackService
  ){}

  async canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot):Promise <boolean>{
      const user = await this.afAuth.currentUser;
      const isLogggedIn = !!user;
      if (!isLogggedIn){
        this.snack.authError()
      }
      return isLogggedIn
    }
    // Commenting out this default boilerplate. I will need to look into to is this is the new way to do things
    // this autogenerated with ng g guard user/auth 
    //  Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    // return true;
    // }
  
}
